// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  student
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  password   String
  role       Role
  created_at DateTime @default(now())

  Enrollment     Enrollment[]
  Achievement    Achievement[]
  LessonProgress LessonProgress[]
}

enum Levels {
  Beginner
  Intermediate
  Advanced
}

model Course {
  id                    String        @id @default(uuid())
  course_name           String
  course_code           String        @unique
  duration              Int
  levels                Levels
  course_description    String
  created_at            DateTime      @default(now())
  demo_video_url        String?
  category              String
  max_students          Int
  is_free               Boolean
  price                 Int?
  discount              Int?
  certificate_available Boolean
  notes                 Json?
  chapters              Chapter[]
  Enrollment            Enrollment[]
  Achievement           Achievement[]
}

model Chapter {
  id          String @id @default(uuid())
  title       String
  video_count Int
  duration    Int
  Course      Course @relation(fields: [courseId], references: [id])
  courseId    String

  lessons Lessons[]
}

model Lessons {
  id             String           @id @default(uuid())
  title          String
  duration       String
  Chapter        Chapter          @relation(fields: [chapterId], references: [id])
  chapterId      String
  LessonProgress LessonProgress[]
}

model LessonProgress {
  id        String @id @default(uuid())
  students  User   @relation(fields: [studentId], references: [id])
  studentId String

  lesson      Lessons  @relation(fields: [lessonId], references: [id])
  lessonId    String
  completed   Boolean  @default(false)
  completedAt DateTime

  @@unique([studentId, lessonId])
}

model Enrollment {
  id         String   @id @default(uuid())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  status     String   @default("enrolled")
  enrolledAt DateTime @default(now())

  @@unique([studentId, courseId])
}

model Achievement {
  id          String   @id @default(uuid())
  title       String
  description String?
  awardedAt   DateTime @default(now())

  student   User   @relation(fields: [studentId], references: [id])
  studentId String
  course    Course @relation(fields: [courseId], references: [id])
  courseId  String
}
